Info 0    [18:35:29.524] Starting TS Server
Info 1    [18:35:29.525] Version: 5.2.2
Info 2    [18:35:29.525] Arguments: /usr/local/bin/node /Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/tsserver.js --serverMode partialSemantic --useInferredProjectPerProjectRoot --disableAutomaticTypingAcquisition --cancellationPipeName /private/var/folders/1k/1hld73x1599dxmy2mtdx1jg00000gn/T/5a4681c5e206657e9e820c2fa3eacffc/tscancellation* --logVerbosity verbose --logFile /Users/joshuaying/emblem/semantic-graph/test-ts/src/.log/tsserver-log-WxV7M5/tsserver.log --locale en --validateDefaultNpmLocation --useNodeIpc
Info 3    [18:35:29.525] Platform: darwin NodeVersion: v19.6.0 CaseSensitive: false
Info 4    [18:35:29.525] ServerMode: 1 hasUnknownServerMode: undefined
Info 5    [18:35:29.529] request:
    {
      "seq": 0,
      "type": "request",
      "command": "configure",
      "arguments": {
        "formatOptions": {
          "newLineCharacter": "\n"
        },
        "preferences": {
          "allowIncompleteCompletions": true,
          "allowRenameOfImportPath": true,
          "allowTextChangesInNewFiles": true,
          "disableLineTextInReferences": true,
          "disableSuggestions": false,
          "displayPartsForJSDoc": true,
          "generateReturnInDocTemplate": true,
          "importModuleSpecifierEnding": "auto",
          "importModuleSpecifierPreference": "shortest",
          "includeAutomaticOptionalChainCompletions": true,
          "includeCompletionsForImportStatements": true,
          "includeCompletionsForModuleExports": true,
          "includeCompletionsWithClassMemberSnippets": true,
          "includeCompletionsWithInsertText": true,
          "includeCompletionsWithObjectLiteralMethodSnippets": true,
          "includeCompletionsWithSnippetText": true,
          "includeInlayEnumMemberValueHints": false,
          "includeInlayFunctionLikeReturnTypeHints": false,
          "includeInlayFunctionParameterTypeHints": false,
          "includeInlayParameterNameHints": "none",
          "includeInlayParameterNameHintsWhenArgumentMatchesName": false,
          "includeInlayPropertyDeclarationTypeHints": false,
          "includeInlayVariableTypeHints": false,
          "includeInlayVariableTypeHintsWhenTypeMatchesName": false,
          "includePackageJsonAutoImports": "auto",
          "jsxAttributeCompletionStyle": "auto",
          "lazyConfiguredProjectsFromExternalProject": false,
          "organizeImportsAccentCollation": true,
          "organizeImportsCaseFirst": false,
          "organizeImportsCollation": "ordinal",
          "organizeImportsCollationLocale": "en",
          "organizeImportsIgnoreCase": "auto",
          "organizeImportsNumericCollation": false,
          "providePrefixAndSuffixTextForRename": true,
          "provideRefactorNotApplicableReason": true,
          "quotePreference": "auto"
        }
      }
    }
Info 6    [18:35:29.529] Format host information updated
Info 7    [18:35:29.529] response:
    {"seq":0,"type":"response","command":"configure","request_seq":0,"success":true}
Perf 8    [18:35:29.530] 0::configure: async elapsed time (in milliseconds) 0.4909
Info 9    [18:35:29.530] request:
    {
      "seq": 1,
      "type": "request",
      "command": "open",
      "arguments": {
        "file": "/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts",
        "fileContent": "////The SequenceGenerator class is an abstract class that allows for the creation\n//of\n////sequences of any type. It has a generic type parameter T, which allows for\n//the\n////generation of sequences of any type. The class has three properties:\n//combiner,\n////windowSize, and generationLength. The combiner property is of type\n//Combiner<T>,\n////which is an interface that defines a method for combining\n//elements of type T.\n////The windowSize property is a number that determines the\n//size of the window used\n////for combining elements in the sequence. The\n//generationLength property is also a\n////number that determines the length of the\n//sequence to be generated.\n//\n////The constructor of the SequenceGenerator class\n//takes in three parameters:\n////windowSize, generationLength, and combiner. These\n//parameters are used to\n////initialize the corresponding properties of the class.\n//The constructor ensures\n////that the properties are properly set before the\n//sequence generation process\n////begins.\n//\n////The generateSequence method is\n//responsible for generating the sequence. It uses\n////the getStartingSequence\n//method, which is an abstract method that must be\n////implemented by any class that\n//extends the SequenceGenerator class. This method\n////returns the starting sequence\n//for the generation process. The generateSequence\n////method then uses a for loop\n//to iterate through the generationLength and\n////generate the sequence by combining\n//the latest window of elements using the\n////combiner's combine method. The final\n//sequence is then returned.\n//\n////Overall, the SequenceGenerator class provides a\n//flexible and customizable way\n////to generate sequences of any type by allowing\n//for the use of different types of\n////combiners and window sizes. It also promotes\n//code reusability by using the\n////generic type parameter and abstract\n//methods.\n//ce-generator.ts__0_0-21_1[Class][SequenceGenerator]\n///**\n// * Represents a class that generates a sequence of values using a specified\n//combiner.\n// * @template T - Specifies the type of values that will be generated.\n//\n//*/\n//abstract class SequenceGenerator<T> {\n//\n//\t/**\n//\t * The combiner used to generate\n//the sequence.\n//\t */\n//\tcombiner: Combiner<T>;\n//\n//\t/**\n//\t * The size of the window used\n//for generating the sequence.\n//\t */\n//\twindowSize: number;\n//\n//\t/**\n//\t * The length of\n//the sequence to be generated.\n//\t */\n//\tgenerationLength: number;\n//\n//\t/**\n//\t * Creates\n//a new SequenceGenerator with the specified window size, generation length, and\n//combiner.\n//\t * @param windowSize - The size of the window used for generating the\n//sequence.\n//\t * @param generationLength - The length of the sequence to be\n//generated.\n//\t * @param combiner - The combiner used to generate the sequence.\n//\t\n//*/\n//\tconstructor(windowSize: number, generationLength: number, combiner:\n//Combiner<T>) {\n//\t\tthis.windowSize = windowSize;\n//\t\tthis.generationLength =\n//generationLength;\n//\t\tthis.combiner = combiner;\n//\t}\n//\n//\t/**\n//\t * Generates a sequence\n//of values using the specified combiner, window size, and generation length.\n//\t *\n//@returns The generated sequence of values.\n//\t */\n//\tgenerateSequence(): T[] {\n//\t\t//\n//Gets the starting sequence using the abstract method.\n//\t\tvar sequence =\n//this.getStartingSequence();\n//\n//\t\t// Generates the remaining values in the sequence\n//using the specified combiner, window size, and generation length.\n//\t\tfor (var i =\n//0; i < this.generationLength; i++) {\n//\t\t\t// Gets the latest window of values from\n//the sequence.\n//\t\t\tconst latest_window = sequence.slice(sequence.length -\n//this.windowSize);\n//\n//\t\t\t// Combines the latest window of values using the\n//specified combiner and adds the result to the\n//sequence.\n//\t\t\tsequence.push(this.combiner.combine(latest_window));\n//\t\t}\n//\n//\t\t//\n//Returns the generated sequence.\n//\t\treturn sequence;\n//\t}\n//\n//\t/**\n//\t * Gets the\n//starting sequence of values for the generator.\n//\t * @returns The starting\n//sequence of values.\n//\t */\n//\tabstract getStartingSequence(): T[];\n//}\n//\n///**\n// *\n//Represents an interface for combining a list of values.\n// * @template T -\n//Specifies the type of values that can be combined.\n// */\n//interface Combiner<T>\n//{\n//\n//\t/**\n//\t * Combines a list of values using a specified method.\n//\t * @param l -\n//The list of values to be combined.\n//\t * @returns The result of combining the\n//values.\n//\t */\n//\tcombine(l: T[]): T;\n//}\n//\n///**\n// * Represents a class that can combine\n//a list of numbers.\n// * @implements Combiner<number> - This class implements the\n//Combiner interface, specifying that it works with numbers.\n// */\n//class NumberAdder\n//implements Combiner<number> {\n//\n//\t/**\n//\t * Combines a list of numbers by adding\n//them together.\n//\t * @param l - The list of numbers to be combined.\n//\t * @returns\n//The result of adding all the numbers in the list together.\n//\t */\n//\tcombine(l:\n//number[]): number {\n//\t\t// Uses the reduce method to add all the numbers in the\n//list together.\n//\t\treturn l.reduce((prev, curr) => prev +\n//curr);\n//\t}\n//}\n//ce-generator.ts__51_0-78_1[Class][SequenceGenerator]\n//\n//ng__emblem__semantic-graph__test-ts__src__sequence-generator.ts__181_0-214_1[Class][SequenceGenerator]\n//The SequenceGenerator class is an abstract class that is used to generate a\n//sequence of elements of type T. It contains a constructor that takes in a window\n//size, generation length, and a combiner object. The window size represents the\n//number of elements in the sequence that will be used to generate the next\n//element, while the generation length represents the total number of elements\n//that will be generated. The combiner object is used to combine the elements in\n//the window and generate the next element in the sequence.\n//\n//The class also\n//contains an abstract method called getStartingSequence(), which is used to\n//generate the initial sequence of elements. This method must be implemented by\n//any class that extends the SequenceGenerator class.\n//\n//The generateSequence()\n//method is used to generate the full sequence of elements. It uses the\n//getStartingSequence() method to generate the initial sequence and then uses the\n//combiner object to generate the remaining elements in the sequence. The method\n//returns an array of elements of type T.\n//\n//The Combiner interface is used to\n//ensure that the combine method is implemented correctly. It contains a single\n//method called combine(), which takes in an array of elements of type T and\n//returns a single element of type T. This interface is useful for performing\n//operations on a list of elements, such as finding the sum or average.\n//\n//The\n//NumberAdder class is an implementation of the Combiner interface for numbers. It\n//contains a combine() method that takes in an array of numbers and uses the\n//reduce function to add all the numbers together. This class is useful for\n//performing mathematical operations on a list of numbers, such as finding the\n//total or average.\n//__sequence-generator.ts__183_0-222_1[Class][SequenceGenerator]\n////The class SequenceGenerator is an abstract class that allows for the\n//creation\n////of sequences of any type. It takes in a window size, generation\n//length, and a\n////combiner as parameters in its constructor. The window size\n//determines the\n////number of elements to be used in each combination, while the\n//generation length\n////determines the total number of elements in the final\n//sequence. The combiner is\n////used to combine the elements in each window and add\n//them to the sequence. The\n////class has an abstract method called\n//getStartingSequence, which must be\n////implemented by any class that extends\n//SequenceGenerator. This method is used\n////to generate the initial sequence before\n//the combination process begins. The\n////class also has a method called\n//generateSequence, which uses the getStartingSequence\n////method and the combiner\n//to generate the final sequence. This method iterates\n////through the generation\n//length and uses the combiner to combine the elements in\n////each window and add\n//them to the sequence. The final sequence is then returned\n////as an array of the\n//specified type. This class allows for the creation of\n////sequences of any type,\n//as long as a combiner is provided that can combine\n////elements of that\n//type.\n//__sequence-generator.ts__215_0-260_1[Class][SequenceGenerator]\n////The class SequenceGenerator is an abstract class that allows for the\n//creation\n////of sequences of any type. It takes in a window size, generation\n//length, and a\n////combiner as parameters in its constructor. The window size\n//determines the\n////number of elements to be used in each iteration of the sequence\n//generation,\n////while the generation length determines the total number of\n//elements in the\n////final sequence. The combiner is used to combine the elements\n//in the window\n////into a single element for each iteration. The class also has an\n//abstract\n////method called getStartingSequence, which must be implemented by any\n//class\n////that extends SequenceGenerator. This method is responsible for creating\n//the\n////initial sequence that will be used in the generation process. The\n//generateSequence\n////method uses the getStartingSequence method and the combiner\n//to generate the\n////final sequence of the specified length. This allows for the\n//creation of\n////customized sequences for different purposes, such as number\n//sequences, string\n////sequences, or even custom data type\n//sequences.\n//__sequence-generator.ts__248_0-299_1[Class][SequenceGenerator]\n////The class SequenceGenerator is an abstract class that allows for the\n//creation\n////of sequences of any type. It takes in a window size, generation\n//length, and\n////combiner as parameters in its constructor. The window size\n//determines the\n////number of elements to be used in each combination, while the\n//generation length\n////determines the total number of elements in the final\n//sequence. The combiner is\n////used to combine the elements in the sequence using\n//the specified logic. The\n////generateSequence method uses the getStartingSequence\n//method, which is\n////abstract and must be implemented by any class that extends\n//SequenceGenerator.\n////This method returns the starting sequence for the\n//generation process. The\n////generateSequence method then uses this starting\n//sequence and the combiner to\n////generate the final sequence by combining the\n//elements in the starting sequence\n////with the latest window of elements. This\n//process is repeated for the specified\n////generation length, ultimately returning\n//the final\n//sequence.\n//__sequence-generator.ts__277_0-334_1[Class][SequenceGenerator]\nabstract class SequenceGenerator<T> {\n// ce-generator.ts__1_4-1_26[Property][combiner]\n// ce-generator.ts__53_4-53_26[Property][combiner]\n// ng__emblem__semantic-graph__test-ts__src__sequence-generator.ts__184_4-184_26[Property][combiner]\n// __sequence-generator.ts__187_4-187_26[Property][combiner]\n// __sequence-generator.ts__220_4-220_26[Property][combiner]\n// __sequence-generator.ts__254_4-254_26[Property][combiner]\n// __sequence-generator.ts__284_4-284_26[Property][combiner]\n    combiner: Combiner<T>;\n// ce-generator.ts__2_4-2_23[Property][windowSize]\n// ce-generator.ts__55_4-55_23[Property][windowSize]\n// ng__emblem__semantic-graph__test-ts__src__sequence-generator.ts__187_4-187_23[Property][windowSize]\n// __sequence-generator.ts__191_4-191_23[Property][windowSize]\n// __sequence-generator.ts__225_4-225_23[Property][windowSize]\n// __sequence-generator.ts__260_4-260_23[Property][windowSize]\n// __sequence-generator.ts__291_4-291_23[Property][windowSize]\n    windowSize: number;\n// ce-generator.ts__3_4-3_29[Property][generationLength]\n// ce-generator.ts__57_4-57_29[Property][generationLength]\n// ng__emblem__semantic-graph__test-ts__src__sequence-generator.ts__190_4-190_29[Property][generationLength]\n// __sequence-generator.ts__195_4-195_29[Property][generationLength]\n// __sequence-generator.ts__230_4-230_29[Property][generationLength]\n// __sequence-generator.ts__266_4-266_29[Property][generationLength]\n// __sequence-generator.ts__298_4-298_29[Property][generationLength]\n    generationLength: number;\n\n// ce-generator.ts__5_4-9_5[Method][constructor]\n// ce-generator.ts__60_4-64_5[Method][constructor]\n// ng__emblem__semantic-graph__test-ts__src__sequence-generator.ts__194_4-198_5[Method][constructor]\n// __sequence-generator.ts__200_4-204_5[Method][constructor]\n// __sequence-generator.ts__236_4-240_5[Method][constructor]\n// __sequence-generator.ts__273_4-277_5[Method][constructor]\n// __sequence-generator.ts__306_4-310_5[Method][constructor]\n    constructor(windowSize: number, generationLength: number, combiner: Combiner<T>) {\n        this.windowSize = windowSize;\n        this.generationLength = generationLength;\n        this.combiner = combiner;\n    }\n\n// ce-generator.ts__11_4-18_5[Method][generateSequence]\n// ce-generator.ts__67_4-74_5[Method][generateSequence]\n// ng__emblem__semantic-graph__test-ts__src__sequence-generator.ts__202_4-209_5[Method][generateSequence]\n// __sequence-generator.ts__209_4-216_5[Method][generateSequence]\n// __sequence-generator.ts__246_4-253_5[Method][generateSequence]\n// __sequence-generator.ts__284_4-291_5[Method][generateSequence]\n// __sequence-generator.ts__318_4-325_5[Method][generateSequence]\n    generateSequence(): T[] {\n        var sequence = this.getStartingSequence();\n        for (var i = 0; i < this.generationLength; i++) {\n            const latest_window = sequence.slice(sequence.length - this.windowSize);\n            sequence.push(this.combiner.combine(latest_window))\n        }\n        return sequence;\n    }\n\n// ce-generator.ts__20_4-20_40[Method][getStartingSequence]\n// ce-generator.ts__77_4-77_40[Method][getStartingSequence]\n// ng__emblem__semantic-graph__test-ts__src__sequence-generator.ts__213_4-213_40[Method][getStartingSequence]\n// __sequence-generator.ts__221_4-221_40[Method][getStartingSequence]\n// __sequence-generator.ts__259_4-259_40[Method][getStartingSequence]\n// __sequence-generator.ts__298_4-298_40[Method][getStartingSequence]\n// __sequence-generator.ts__333_4-333_40[Method][getStartingSequence]\n    abstract getStartingSequence(): T[];\n}\n\n\n//ce-generator.ts__24_0-26_1[Interface][Combiner]\n//ce-generator.ts__82_0-85_1[Interface][Combiner]\n//\n//ng__emblem__semantic-graph__test-ts__src__sequence-generator.ts__219_0-223_1[Interface][Combiner]\n//__sequence-generator.ts__229_0-234_1[Interface][Combiner]\n//__sequence-generator.ts__268_0-274_1[Interface][Combiner]\n//__sequence-generator.ts__308_0-315_1[Interface][Combiner]\n//__sequence-generator.ts__344_0-352_1[Interface][Combiner]\ninterface Combiner<T> {\n// ce-generator.ts__25_4-25_22[Method][combine]\n// ce-generator.ts__84_4-84_22[Method][combine]\n// ng__emblem__semantic-graph__test-ts__src__sequence-generator.ts__222_4-222_22[Method][combine]\n// __sequence-generator.ts__233_4-233_22[Method][combine]\n// __sequence-generator.ts__273_4-273_22[Method][combine]\n// __sequence-generator.ts__314_4-314_22[Method][combine]\n// __sequence-generator.ts__351_4-351_22[Method][combine]\n    combine(l: T[]): T\n}\n\n//The class NumberAdder is a type of Combiner that specifically works with\n//numbers. It has a method called combine that takes in an array of numbers and\n//returns a single number that is the sum of all the numbers in the array. This is\n//achieved by using the reduce method on the array, which iterates through each\n//element and adds it to the previous element until a single value is returned.\n//The class implements the Combiner interface, which allows it to work with any\n//type of data as long as it has a combine method that takes in an array of that\n//type and returns a single value of that type. This makes the NumberAdder class\n//versatile and reusable for different types of\n//data.\n//ce-generator.ts__28_0-32_1[Class][NumberAdder]\n///**\n// * Represents a class that can combine a list of numbers.\n// * @implements\n//Combiner<number> - This class implements the Combiner interface, specifying that\n//it works with numbers.\n// */\n//class NumberAdder implements Combiner<number> {\n//\n//   \n///**\n//     * Combines a list of numbers by adding them together.\n//     * @param l -\n//The list of numbers to be combined.\n//     * @returns The result of adding all the\n//numbers in the list together.\n//     */\n//    combine(l: number[]): number {\n//       \n//// Uses the reduce method to add all the numbers in the list together.\n//       \n//return l.reduce((prev, curr) => prev + curr)\n//    }\n//}\n//\n///**\n// * Represents an\n//interface for combining a list of values.\n// * @template T - Specifies the type of\n//values that can be combined.\n// */\n//interface Combiner<T> {\n//\n//    /**\n//     *\n//Combines a list of values.\n//     * @param l - The list of values to be combined.\n//\n//    * @returns The result of combining the values.\n//     */\n//    combine(l: T[]):\n//T\n//}\n//ce-generator.ts__98_0-103_1[Class][NumberAdder]\n//The class NumberAdder is a type of Combiner that is used to add together a list\n//of numbers. It implements the Combiner interface and has a method called combine\n//that takes in an array of numbers and returns the sum of all the numbers in the\n//array. This class is useful for performing mathematical operations on a list of\n//numbers, such as finding the total or average. It is generic, meaning it can\n//work with any type of number, making it versatile and adaptable for different\n//use cases. The combine method uses the reduce function to iterate through the\n//array and add each number to the previous one, resulting in a single sum value.\n//This class is a helpful tool for simplifying and streamlining number\n//calculations in a variety of\n//applications.\n//ng__emblem__semantic-graph__test-ts__src__sequence-generator.ts__279_0-285_1[Class][NumberAdder]\n///**\n// * Represents a class called NumberAdder that implements the Combiner\n//interface for numbers.\n// * This class is used to combine a list of numbers and\n//return the sum of all the numbers.\n// * It contains a method called combine that\n//takes in an array of numbers and uses the reduce function to add all the numbers\n//together.\n// * The combine method returns a single number, which is the sum of all\n//the numbers in the array.\n// * The Combiner interface is used to ensure that the\n//combine method is implemented correctly and takes in an array of numbers and\n//returns a single number.\n// * This class is useful for performing mathematical\n//operations on a list of numbers, such as finding the total or average.\n//\n//*/\n//__sequence-generator.ts__302_0-309_1[Class][NumberAdder]\n//The class NumberAdder is a type of Combiner that specifically works with\n//numbers. It has a method called combine that takes in an array of numbers and\n//returns the sum of all the numbers in the array. This method uses the reduce\n//function to iterate through the array and add each number to the previous one.\n//The class implements the Combiner interface, which requires a combine method\n//that takes in an array of any type and returns a value of that same type. This\n//allows for flexibility in the types of data that can be combined using the\n//NumberAdder class. \n//__sequence-generator.ts__360_0-368_1[Class][NumberAdder]\n//The class NumberAdder is a type of Combiner that specifically works with\n//numbers. It has a method called combine that takes in an array of numbers and\n//returns the sum of all the numbers in the array. This method uses the reduce\n//function to iterate through the array and add each number to the previous one,\n//ultimately returning the total sum. The Combiner interface is also implemented,\n//which requires the combine method to take in an array of any type and return a\n//value of that same type. This allows for flexibility in the types of data that\n//can be combined using the NumberAdder\n//class.\n//__sequence-generator.ts__410_0-419_1[Class][NumberAdder]\n//The class NumberAdder is a type of Combiner that specifically works with\n//numbers. It has a method called combine that takes in an array of numbers and\n//returns the sum of all the numbers in the array. This method uses the reduce\n//function to iterate through the array and add each number to the previous one,\n//ultimately returning the total sum. The Combiner interface is also implemented,\n//which requires the combine method to take in an array of any type and return a\n//value of that same type. This allows for flexibility in the types of data that\n//can be combined using the NumberAdder\n//class.\n//__sequence-generator.ts__457_0-467_1[Class][NumberAdder]\nclass NumberAdder implements Combiner<number> {\n// ce-generator.ts__29_4-31_5[Method][combine]\n// ce-generator.ts__100_4-102_5[Method][combine]\n// ng__emblem__semantic-graph__test-ts__src__sequence-generator.ts__282_4-284_5[Method][combine]\n// __sequence-generator.ts__306_4-308_5[Method][combine]\n// __sequence-generator.ts__365_4-367_5[Method][combine]\n// __sequence-generator.ts__416_4-418_5[Method][combine]\n// __sequence-generator.ts__464_4-466_5[Method][combine]\n    combine(l: number[]): number {\n        return l.reduce((prev, curr) => prev + curr)\n    }\n}\n\n//ce-generator.ts__34_0-42_1[Class][ConcreteSequenceGenerator]\n///**\n// * Represents a class that generates a sequence of values using a specified\n//combiner.\n// * @template T - Specifies the type of values that will be generated.\n//\n//*/\n//class ConcreteSequenceGenerator extends SequenceGenerator<number>\n//{\n//\n//\t\t\n//\tconstructor(generationLength: number) {\n//\t        super(2,\n//generationLength, new NumberAdder());\n//\t    }\n//\t\n//\tgetStartingSequence(): number[]\n//{\n//\t        return [0, 1];\n//\t    }\n//}\n//\n///**\n// * Represents a class that can combine a\n//list of numbers.\n// * @implements Combiner<number> - This class implements the\n//Combiner interface, specifying that it works with numbers.\n// */\n//class NumberAdder\n//implements Combiner<number> {\n//\n//\t\t\n//\tcombine(l: number[]): number {\n//\t       \n//return l.reduce((prev, curr) => prev + curr)\n//\t    }\n//}\n//\n///**\n// * Represents an\n//interface for combining a list of values.\n// * @template T - Specifies the type of\n//values that can be combined.\n// */\n//interface Combiner<T> {\n//\n//    /**\n//     *\n//Combines a list of values.\n//     * @param l - The list of values to be combined.\n//\n//    * @returns The result of combining the values.\n//     */\n//    combine(l: T[]):\n//T\n//}\n//ce-generator.ts__106_0-116_1[Class][ConcreteSequenceGenerator]\n////The class ConcreteSequenceGenerator is a type of SequenceGenerator that is\n//used\n////to generate a sequence of numbers. It extends the SequenceGenerator class\n//and\n////specifies that the sequence will be made up of numbers. It has a\n//constructor\n////that takes in a generationLength parameter, which determines the\n//length of the\n////sequence to be generated. It also calls the super constructor of\n//the\n////SequenceGenerator class, passing in the number 2 as the windowSize and a\n//new\n////instance of the NumberAdder class as the combiner. This means that the\n//sequence\n////will be generated by adding the previous two numbers in the sequence\n//together,\n////starting with the numbers 0 and 1. The getStartingSequence method is\n//implemented\n////to return an array containing these two starting numbers. This\n//class is useful\n////for generating sequences of numbers in a simple and efficient\n//manner, and can be\n////customized by changing the generationLength parameter or\n//using a different type\n////of\n//Combiner.\n//ng__emblem__semantic-graph__test-ts__src__sequence-generator.ts__344_0-356_1[Class][ConcreteSequenceGenerator]\n////The ConcreteSequenceGenerator class is a concrete implementation of\n//the\n////SequenceGenerator class. It extends the SequenceGenerator class and\n//specifies\n////the type of elements to be generated as numbers. It contains a\n//constructor that\n////takes in a generation length and uses the NumberAdder class\n//as the combiner\n////object. The generation length represents the total number of\n//elements that will\n////be generated in the sequence.\n////\n////The class also overrides\n//the\n////getStartingSequence() method to return an initial sequence of numbers [0,\n//1].\n////This sequence is used as the starting point for generating the\n//remaining\n////elements in the sequence.\n////\n////The ConcreteSequenceGenerator class\n//is useful for\n////generating a sequence of numbers, such as the Fibonacci\n//sequence, where each\n////element is the sum of the previous two elements. It uses\n//the NumberAdder class\n////to combine the elements in the window and generate the\n//next element in\n//the\n////sequence.\n//__sequence-generator.ts__395_0-409_1[Class][ConcreteSequenceGenerator]\n//__sequence-generator.ts__485_0-501_1[Class][ConcreteSequenceGenerator]\n//__sequence-generator.ts__537_0-555_1[Class][ConcreteSequenceGenerator]\n//__sequence-generator.ts__586_0-606_1[Class][ConcreteSequenceGenerator]\nclass ConcreteSequenceGenerator extends SequenceGenerator<number> {\n// ce-generator.ts__35_4-37_5[Method][constructor]\n// ce-generator.ts__108_4-110_5[Method][constructor]\n// ng__emblem__semantic-graph__test-ts__src__sequence-generator.ts__347_4-349_5[Method][constructor]\n// __sequence-generator.ts__399_4-401_5[Method][constructor]\n// __sequence-generator.ts__490_4-492_5[Method][constructor]\n// __sequence-generator.ts__543_4-545_5[Method][constructor]\n// __sequence-generator.ts__593_4-595_5[Method][constructor]\n    constructor(generationLength: number) {\n        super(2, generationLength, new NumberAdder());\n    }\n\n// ce-generator.ts__39_4-41_5[Method][getStartingSequence]\n// ce-generator.ts__113_4-115_5[Method][getStartingSequence]\n// ng__emblem__semantic-graph__test-ts__src__sequence-generator.ts__353_4-355_5[Method][getStartingSequence]\n// __sequence-generator.ts__406_4-408_5[Method][getStartingSequence]\n// __sequence-generator.ts__498_4-500_5[Method][getStartingSequence]\n// __sequence-generator.ts__552_4-554_5[Method][getStartingSequence]\n// __sequence-generator.ts__603_4-605_5[Method][getStartingSequence]\n    getStartingSequence(): number[] {\n        return [0, 1];\n    }\n}\n\n////The ConcreteSequenceGenerator class extends the SequenceGenerator class\n//and\n////provides a concrete implementation of the getStartingSequence method. It\n//takes\n////in a generationLength parameter and uses it to initialize the\n//generationLength\n////property of the parent class. It also takes in a NumberAdder\n//instance as the\n////combiner, which is used to combine the elements in the\n//sequence. This class\n////demonstrates how the SequenceGenerator class can be\n//extended and customized\n////for specific use cases. The generateSequence method is\n//called in the main\n////function, which creates a new instance of the\n//ConcreteSequenceGenerator class\n////with a generationLength of 10 and calls the\n//generateSequence method to generate\n////a sequence of numbers. The result is then\n//logged to the console using the\n////console.log method. This shows how the\n//SequenceGenerator class can be used in\n////a practical\n//application.\n//ce-generator.ts__44_0-46_1[Function][main]\n//ce-generator.ts__143_0-145_1[Function][main]\n////The function main is the entry point of the program. It creates a new\n//instance\n////of the ConcreteSequenceGenerator class, passing in the number 10 as\n//the\n////generationLength parameter. It then calls the generateSequence method on\n//this\n////instance, which returns an array of numbers representing the generated\n//sequence.\n////This array is then passed as an argument to the console.log\n//function, which\n////prints the sequence to the console. This function is essential\n//for running the\n////program and displaying the results of the sequence generation\n//process. It\n////demonstrates the use of the ConcreteSequenceGenerator class and\n//its\n////generateSequence method, showcasing the functionality and purpose of\n//these\n////components in the overall\n//program.\n//ng__emblem__semantic-graph__test-ts__src__sequence-generator.ts__384_0-386_1[Function][main]\n/////**\n//// * Represents a class called ConcreteSequenceGenerator that extends\n//the\n////SequenceGenerator class.\n//// * This class is a concrete implementation of\n//the\n////SequenceGenerator class and specifies the type of elements to be generated\n//as\n////numbers.\n//// * It contains a constructor that takes in a generation length\n//and uses\n////the NumberAdder class as the combiner object.\n//// * The generation\n//length\n////represents the total number of elements that will be generated in the\n//sequence.\n//// * The class also overrides the getStartingSequence() method to\n//return an\n////initial sequence of numbers [0, 1].\n//// * This sequence is used as\n//the starting\n////point for generating the remaining elements in the sequence.\n//// *\n//The\n////ConcreteSequenceGenerator class is useful for generating a sequence of\n//numbers,\n////such as the Fibonacci sequence, where each element is the sum of the\n//previous\n////two elements.\n//// * It uses the NumberAdder class to combine the\n//elements in the\n////window and generate the next element in the sequence.\n////\n//*/\n//function main() {\n//    console.log((new\n//ConcreteSequenceGenerator(10)).generateSequence());\n//}\n////The main function is\n//used to call the generateSequence() method of the\n////ConcreteSequenceGenerator\n//class and log the result to the console.\n////This function is the entry point of\n//the program and is responsible for\n////executing the desired\n//functionality.\n//__sequence-generator.ts__458_0-460_1[Function][main]\n////The function main is the entry point of the program. It creates a new\n//instance\n////of the ConcreteSequenceGenerator class, passing in a generation\n//length of 10\n////as a parameter. This class extends the abstract class\n//SequenceGenerator and\n////uses a NumberAdder as its combiner. The generateSequence\n//method is then called\n////on this instance, which uses the getStartingSequence\n//method and the combiner\n////to generate a sequence of numbers. The final sequence\n//is then logged to the\n////console using the console.log method. This function\n//allows for the creation of\n////sequences of numbers using the\n//ConcreteSequenceGenerator class and\n//its\n////combiner.\n//__sequence-generator.ts__597_0-599_1[Function][main]\n////The function main is the entry point of the program. It creates a new\n//instance\n////of the ConcreteSequenceGenerator class, passing in a generation\n//length of 10.\n////This class extends the SequenceGenerator class and takes in a\n//window size of 2\n////and a NumberAdder as parameters in its constructor. The\n//generateSequence method\n////is then called on this instance, which uses the\n//getStartingSequence method and\n////the NumberAdder combiner to generate a sequence\n//of numbers. This sequence is\n////then logged to the console using the console.log\n//method. This function\n////demonstrates the use of the SequenceGenerator class and\n//its ability to create\n////customized sequences for different\n//purposes.\n//__sequence-generator.ts__670_0-672_1[Function][main]\n////The function main is the entry point of the program. It creates a new\n//instance\n////of the ConcreteSequenceGenerator class, passing in a generation\n//length of 10 as\n////a parameter. This class extends the SequenceGenerator class\n//and specifies that\n////the sequence will be made up of numbers. It also specifies\n//a window size of 2\n////and uses the NumberAdder class as the combiner. The\n//generateSequence method is\n////then called on this instance, which uses the\n//getStartingSequence method to\n////create the starting sequence and then uses the\n//combiner to generate the final\n////sequence. The result is then logged to the\n//console using the\n//console.log\n////function.\n//__sequence-generator.ts__740_0-742_1[Function][main]\nfunction main() {\n    console.log((new ConcreteSequenceGenerator(10)).generateSequence());\n}\n\nmain();",
        "scriptKindName": "TS",
        "projectRootPath": "/Users/joshuaying/emblem/semantic-graph/test-ts/src"
      }
    }
Info 10   [18:35:29.532] Starting updateGraphWorker: Project: /dev/null/inferredProject1*
Info 11   [18:35:29.739] Finishing updateGraphWorker: Project: /dev/null/inferredProject1* Version: 1 structureChanged: true structureIsReused:: Not Elapsed: 206.1111249923706ms
Info 12   [18:35:29.739] Project '/dev/null/inferredProject1*' (Inferred)
Info 13   [18:35:29.739] 	Files (8)
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.es5.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.dom.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.webworker.importscripts.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.scripthost.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.decorators.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.decorators.legacy.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts


	../node_modules/typescript/lib/lib.d.ts
	  Default library for target 'es5'
	../node_modules/typescript/lib/lib.es5.d.ts
	  Library referenced via 'es5' from file '../node_modules/typescript/lib/lib.d.ts'
	../node_modules/typescript/lib/lib.dom.d.ts
	  Library referenced via 'dom' from file '../node_modules/typescript/lib/lib.d.ts'
	../node_modules/typescript/lib/lib.webworker.importscripts.d.ts
	  Library referenced via 'webworker.importscripts' from file '../node_modules/typescript/lib/lib.d.ts'
	../node_modules/typescript/lib/lib.scripthost.d.ts
	  Library referenced via 'scripthost' from file '../node_modules/typescript/lib/lib.d.ts'
	../node_modules/typescript/lib/lib.decorators.d.ts
	  Library referenced via 'decorators' from file '../node_modules/typescript/lib/lib.es5.d.ts'
	../node_modules/typescript/lib/lib.decorators.legacy.d.ts
	  Library referenced via 'decorators.legacy' from file '../node_modules/typescript/lib/lib.es5.d.ts'
	sequence-generator.ts
	  Root file specified for compilation

Info 14   [18:35:29.739] -----------------------------------------------
Info 15   [18:35:29.740] Project '/dev/null/inferredProject1*' (Inferred)
Info 15   [18:35:29.740] 	Files (8)

Info 15   [18:35:29.740] -----------------------------------------------
Info 15   [18:35:29.740] Open files: 
Info 15   [18:35:29.740] 	FileName: /Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts ProjectRootPath: /Users/joshuaying/emblem/semantic-graph/test-ts/src
Info 15   [18:35:29.740] 		Projects: /dev/null/inferredProject1*
Perf 15   [18:35:29.740] 1::open: async elapsed time (in milliseconds) 209.5014
Info 16   [18:35:29.740] request:
    {
      "seq": 2,
      "type": "request",
      "command": "open",
      "arguments": {
        "file": "/Users/joshuaying/emblem/semantic-graph/test-ts/src/index.ts",
        "fileContent": "// // demonstrating why we need to bubble up from child to parent\n// type WrappedType = number | void;\n\n// type WrapperType = {\n//   a: string,\n//   b: WrappedType\n// }\n\n// function f() {\n//   const x: WrapperType = {\n//     a: 'hello',\n//     b: 5\n//   }\n\n//   console.log(x.b);\n// }\n\n// interface I {\n//   m(): string;\n// }\n\n// class C implements I {\n//   m() {\n//     return \"hello\";\n//   }\n// }\n\n\n\n/*\n// Tests for LSP idiosyncracy where subclass overriding / implementation methods are referencedBy the superclass method/field.\n// method1 should NOT referenceInDefinition B.method2 (only A.method2)\nabstract class A {\n  method1() {\n    this.method2()\n  }\n  abstract method2();\n}\n\nclass B extends A {\n  method2() {}\n}\n*/\n\n\n\n/*\n// Tests for bubbling children's referenceInDefinition up to parents.\n// A should referenceInDefinition B.\nfunction B() {}\n\nclass A {\n  m1() {\n    B()\n  }\n}\n*/\n\n// class A {\n//   b: B\n// }\n\n// class B {\n//   a: A\n//   constructor(a: A) {\n//     this.a = a;\n//     this.a.b = this;\n//   }\n// }\n\n// console.log(new B(new A()));",
        "scriptKindName": "TS",
        "projectRootPath": "/Users/joshuaying/emblem/semantic-graph/test-ts/src"
      }
    }
Info 17   [18:35:29.740] Starting updateGraphWorker: Project: /dev/null/inferredProject1*
Info 18   [18:35:29.742] Finishing updateGraphWorker: Project: /dev/null/inferredProject1* Version: 2 structureChanged: true structureIsReused:: Not Elapsed: 2.160583019256592ms
Info 19   [18:35:29.742] Project '/dev/null/inferredProject1*' (Inferred)
Info 20   [18:35:29.743] 	Files (9)
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.es5.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.dom.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.webworker.importscripts.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.scripthost.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.decorators.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.decorators.legacy.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/src/index.ts


	../node_modules/typescript/lib/lib.d.ts
	  Default library for target 'es5'
	../node_modules/typescript/lib/lib.es5.d.ts
	  Library referenced via 'es5' from file '../node_modules/typescript/lib/lib.d.ts'
	../node_modules/typescript/lib/lib.dom.d.ts
	  Library referenced via 'dom' from file '../node_modules/typescript/lib/lib.d.ts'
	../node_modules/typescript/lib/lib.webworker.importscripts.d.ts
	  Library referenced via 'webworker.importscripts' from file '../node_modules/typescript/lib/lib.d.ts'
	../node_modules/typescript/lib/lib.scripthost.d.ts
	  Library referenced via 'scripthost' from file '../node_modules/typescript/lib/lib.d.ts'
	../node_modules/typescript/lib/lib.decorators.d.ts
	  Library referenced via 'decorators' from file '../node_modules/typescript/lib/lib.es5.d.ts'
	../node_modules/typescript/lib/lib.decorators.legacy.d.ts
	  Library referenced via 'decorators.legacy' from file '../node_modules/typescript/lib/lib.es5.d.ts'
	sequence-generator.ts
	  Root file specified for compilation
	index.ts
	  Root file specified for compilation

Info 21   [18:35:29.743] -----------------------------------------------
Info 22   [18:35:29.743] Project '/dev/null/inferredProject1*' (Inferred)
Info 22   [18:35:29.743] 	Files (9)

Info 22   [18:35:29.743] -----------------------------------------------
Info 22   [18:35:29.743] Open files: 
Info 22   [18:35:29.743] 	FileName: /Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts ProjectRootPath: /Users/joshuaying/emblem/semantic-graph/test-ts/src
Info 22   [18:35:29.743] 		Projects: /dev/null/inferredProject1*
Info 22   [18:35:29.743] 	FileName: /Users/joshuaying/emblem/semantic-graph/test-ts/src/index.ts ProjectRootPath: /Users/joshuaying/emblem/semantic-graph/test-ts/src
Info 22   [18:35:29.743] 		Projects: /dev/null/inferredProject1*
Perf 22   [18:35:29.743] 2::open: async elapsed time (in milliseconds) 2.7342
Info 23   [18:35:29.743] request:
    {
      "seq": 3,
      "type": "request",
      "command": "open",
      "arguments": {
        "file": "/Users/joshuaying/emblem/semantic-graph/test-ts/src/bfs-test.ts",
        "fileContent": "//st.ts__0_0-11_1[Class][A]\n//st.ts__1_0-15_1[Class][A]\n//\n//s__joshuaying__emblem__semantic-graph__test-ts__src__bfs-test.ts__2_0-19_1[Class][A]\n//__bfs-test.ts__4_0-24_1[Class][A]\n//__bfs-test.ts__5_0-28_1[Class][A]\n//__bfs-test.ts__6_0-32_1[Class][A]\n//__bfs-test.ts__7_0-36_1[Class][A]\nclass A {\n// st.ts__1_4-1_18[Property][aField]\n// st.ts__3_4-3_18[Property][aField]\n// s__joshuaying__emblem__semantic-graph__test-ts__src__bfs-test.ts__5_4-5_18[Property][aField]\n// __bfs-test.ts__8_4-8_18[Property][aField]\n// __bfs-test.ts__10_4-10_18[Property][aField]\n// __bfs-test.ts__12_4-12_18[Property][aField]\n// __bfs-test.ts__14_4-14_18[Property][aField]\n    aField: number\n// st.ts__2_4-4_5[Method][constructor]\n// st.ts__5_4-7_5[Method][constructor]\n// s__joshuaying__emblem__semantic-graph__test-ts__src__bfs-test.ts__8_4-10_5[Method][constructor]\n// __bfs-test.ts__12_4-14_5[Method][constructor]\n// __bfs-test.ts__15_4-17_5[Method][constructor]\n// __bfs-test.ts__18_4-20_5[Method][constructor]\n// __bfs-test.ts__21_4-23_5[Method][constructor]\n    constructor() {\n        this.aField = 3\n    }\n// st.ts__5_4-10_5[Method][M]\n// st.ts__9_4-14_5[Method][M]\n// s__joshuaying__emblem__semantic-graph__test-ts__src__bfs-test.ts__13_4-18_5[Method][M]\n// __bfs-test.ts__18_4-23_5[Method][M]\n// __bfs-test.ts__22_4-27_5[Method][M]\n// __bfs-test.ts__26_4-31_5[Method][M]\n// __bfs-test.ts__30_4-35_5[Method][M]\n    M() {\n        const b = new B();\n        b.C();\n        b.bField2;\n        this.aField;\n    }\n}\n\n//Class B is a blueprint for creating objects that have three fields: bField,\n//bField2, and bField3. These fields are all of type number. The constructor\n//function initializes the values of bField and bField2 to 4 and 6, respectively.\n//The C method allows access to the value of bField, while the D method does not\n//have any functionality. This class can be used to create objects with specific\n//numerical properties and methods.\n//st.ts__13_0-29_1[Class][B]\n//Class B is a blueprint for creating objects that have three fields: bField,\n//bField2, and bField3. These fields are all of type number. The constructor\n//function initializes the values of bField and bField2 to 4 and 6, respectively.\n//The C method allows access to the value of bField, while the D method does not\n//have any functionality. This class can be used to create objects with specific\n//numerical properties and methods.\n//st.ts__24_0-46_1[Class][B]\n//Class B is a blueprint for creating objects that contain various fields and\n//methods. It has three fields, bField, bField2, and bField3, all of which are of\n//type number. The constructor function initializes the values of bField and\n//bField2 to 4 and 6, respectively. The C method allows access to the bField\n//field, while the D method does not have any functionality. This class can be\n//used to create objects with specific properties and\n//behaviors.\n//s__joshuaying__emblem__semantic-graph__test-ts__src__bfs-test.ts__35_0-63_1[Class][B]\n//Class B is a blueprint for creating objects that contain several fields and\n//methods. It has three fields, bField, bField2, and bField3, all of which are of\n//type number. The constructor function initializes the values of bField and\n//bField2 to 4 and 6, respectively. The C method allows access to the bField\n//field, while the D method does not have any functionality. This class can be\n//used to create objects with specific properties and behaviors, making it a\n//useful tool for organizing and managing data in a\n//program.\n//__bfs-test.ts__48_0-82_1[Class][B]\n//Class B is a blueprint for creating objects that contain three fields: bField,\n//bField2, and bField3. These fields are all of type number. The constructor\n//function initializes the values of bField and bField2 to 4 and 6, respectively.\n//The C method allows access to the value of bField, while the D method does not\n//have any functionality. This class can be used to create objects with specific\n//numerical properties and methods.\n//__bfs-test.ts__61_0-101_1[Class][B]\n//Class B is a blueprint for creating objects that have three fields: bField,\n//bField2, and bField3. These fields are all of type number. The constructor\n//function initializes the values of bField and bField2 to 4 and 6, respectively.\n//The C method allows access to the value of bField, while the D method does not\n//have any functionality.\n//__bfs-test.ts__72_0-118_1[Class][B]\n//Class B is a blueprint for creating objects that contain three fields: bField,\n//bField2, and bField3. These fields are all of type number. The constructor\n//function initializes the values of bField and bField2 to 4 and 6, respectively.\n//The C method allows access to the value of bField, while the D method does not\n//have any functionality. This class can be used to create objects with specific\n//numerical properties and methods.\n//__bfs-test.ts__82_0-134_1[Class][B]\nclass B {\n// st.ts__14_4-14_18[Property][bField]\n// st.ts__26_4-26_18[Property][bField]\n// s__joshuaying__emblem__semantic-graph__test-ts__src__bfs-test.ts__38_4-38_18[Property][bField]\n// __bfs-test.ts__52_4-52_18[Property][bField]\n// __bfs-test.ts__66_4-66_18[Property][bField]\n// __bfs-test.ts__78_4-78_18[Property][bField]\n// __bfs-test.ts__89_4-89_18[Property][bField]\n    bField: number\n// st.ts__15_4-15_19[Property][bField2]\n// st.ts__28_4-28_19[Property][bField2]\n// s__joshuaying__emblem__semantic-graph__test-ts__src__bfs-test.ts__41_4-41_19[Property][bField2]\n// __bfs-test.ts__56_4-56_19[Property][bField2]\n// __bfs-test.ts__71_4-71_19[Property][bField2]\n// __bfs-test.ts__84_4-84_19[Property][bField2]\n// __bfs-test.ts__96_4-96_19[Property][bField2]\n    bField2: number\n// st.ts__16_4-16_19[Property][bField3]\n// st.ts__30_4-30_19[Property][bField3]\n// s__joshuaying__emblem__semantic-graph__test-ts__src__bfs-test.ts__44_4-44_19[Property][bField3]\n// __bfs-test.ts__60_4-60_19[Property][bField3]\n// __bfs-test.ts__76_4-76_19[Property][bField3]\n// __bfs-test.ts__90_4-90_19[Property][bField3]\n// __bfs-test.ts__103_4-103_19[Property][bField3]\n    bField3: number\n// st.ts__17_4-20_5[Method][constructor]\n// st.ts__32_4-35_5[Method][constructor]\n// s__joshuaying__emblem__semantic-graph__test-ts__src__bfs-test.ts__47_4-50_5[Method][constructor]\n// __bfs-test.ts__64_4-67_5[Method][constructor]\n// __bfs-test.ts__81_4-84_5[Method][constructor]\n// __bfs-test.ts__96_4-99_5[Method][constructor]\n// __bfs-test.ts__110_4-113_5[Method][constructor]\n    constructor() {\n        this.bField = 4;\n        this.bField2 = 6;\n    }\n\n// st.ts__22_4-24_5[Method][C]\n// st.ts__38_4-40_5[Method][C]\n// s__joshuaying__emblem__semantic-graph__test-ts__src__bfs-test.ts__54_4-56_5[Method][C]\n// __bfs-test.ts__72_4-74_5[Method][C]\n// __bfs-test.ts__90_4-92_5[Method][C]\n// __bfs-test.ts__106_4-108_5[Method][C]\n// __bfs-test.ts__121_4-123_5[Method][C]\n    C() {\n        this.bField;\n    }\n\n// st.ts__26_4-28_5[Method][D]\n// st.ts__43_4-45_5[Method][D]\n// s__joshuaying__emblem__semantic-graph__test-ts__src__bfs-test.ts__60_4-62_5[Method][D]\n// __bfs-test.ts__79_4-81_5[Method][D]\n// __bfs-test.ts__98_4-100_5[Method][D]\n// __bfs-test.ts__115_4-117_5[Method][D]\n// __bfs-test.ts__131_4-133_5[Method][D]\n    D() {\n\n    }\n}",
        "scriptKindName": "TS",
        "projectRootPath": "/Users/joshuaying/emblem/semantic-graph/test-ts/src"
      }
    }
Info 24   [18:35:29.743] Starting updateGraphWorker: Project: /dev/null/inferredProject1*
Info 25   [18:35:29.745] Finishing updateGraphWorker: Project: /dev/null/inferredProject1* Version: 3 structureChanged: true structureIsReused:: Not Elapsed: 2.070624828338623ms
Info 26   [18:35:29.745] Project '/dev/null/inferredProject1*' (Inferred)
Info 27   [18:35:29.745] 	Files (10)
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.es5.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.dom.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.webworker.importscripts.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.scripthost.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.decorators.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/node_modules/typescript/lib/lib.decorators.legacy.d.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/src/index.ts
	/Users/joshuaying/emblem/semantic-graph/test-ts/src/bfs-test.ts


	../node_modules/typescript/lib/lib.d.ts
	  Default library for target 'es5'
	../node_modules/typescript/lib/lib.es5.d.ts
	  Library referenced via 'es5' from file '../node_modules/typescript/lib/lib.d.ts'
	../node_modules/typescript/lib/lib.dom.d.ts
	  Library referenced via 'dom' from file '../node_modules/typescript/lib/lib.d.ts'
	../node_modules/typescript/lib/lib.webworker.importscripts.d.ts
	  Library referenced via 'webworker.importscripts' from file '../node_modules/typescript/lib/lib.d.ts'
	../node_modules/typescript/lib/lib.scripthost.d.ts
	  Library referenced via 'scripthost' from file '../node_modules/typescript/lib/lib.d.ts'
	../node_modules/typescript/lib/lib.decorators.d.ts
	  Library referenced via 'decorators' from file '../node_modules/typescript/lib/lib.es5.d.ts'
	../node_modules/typescript/lib/lib.decorators.legacy.d.ts
	  Library referenced via 'decorators.legacy' from file '../node_modules/typescript/lib/lib.es5.d.ts'
	sequence-generator.ts
	  Root file specified for compilation
	index.ts
	  Root file specified for compilation
	bfs-test.ts
	  Root file specified for compilation

Info 28   [18:35:29.745] -----------------------------------------------
Info 29   [18:35:29.745] Project '/dev/null/inferredProject1*' (Inferred)
Info 29   [18:35:29.745] 	Files (10)

Info 29   [18:35:29.745] -----------------------------------------------
Info 29   [18:35:29.745] Open files: 
Info 29   [18:35:29.745] 	FileName: /Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts ProjectRootPath: /Users/joshuaying/emblem/semantic-graph/test-ts/src
Info 29   [18:35:29.745] 		Projects: /dev/null/inferredProject1*
Info 29   [18:35:29.745] 	FileName: /Users/joshuaying/emblem/semantic-graph/test-ts/src/index.ts ProjectRootPath: /Users/joshuaying/emblem/semantic-graph/test-ts/src
Info 29   [18:35:29.745] 		Projects: /dev/null/inferredProject1*
Info 29   [18:35:29.745] 	FileName: /Users/joshuaying/emblem/semantic-graph/test-ts/src/bfs-test.ts ProjectRootPath: /Users/joshuaying/emblem/semantic-graph/test-ts/src
Info 29   [18:35:29.745] 		Projects: /dev/null/inferredProject1*
Perf 29   [18:35:29.745] 3::open: async elapsed time (in milliseconds) 2.5129
Info 30   [18:35:29.745] request:
    {
      "seq": 4,
      "type": "request",
      "command": "navtree",
      "arguments": {
        "file": "/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts"
      }
    }
Perf 31   [18:35:29.757] 4::navtree: elapsed time (in milliseconds) 11.7057
Info 32   [18:35:29.757] response:
    {"seq":0,"type":"response","command":"navtree","request_seq":4,"success":true,"body":{"text":"<global>","kind":"script","kindModifiers":"","spans":[{"start":{"line":1,"offset":1},"end":{"line":814,"offset":8}}],"childItems":[{"text":"Combiner","kind":"interface","kindModifiers":"","spans":[{"start":{"line":380,"offset":1},"end":{"line":389,"offset":2}}],"nameSpan":{"start":{"line":380,"offset":11},"end":{"line":380,"offset":19}},"childItems":[{"text":"combine","kind":"method","kindModifiers":"","spans":[{"start":{"line":388,"offset":5},"end":{"line":388,"offset":23}}],"nameSpan":{"start":{"line":388,"offset":5},"end":{"line":388,"offset":12}}}]},{"text":"ConcreteSequenceGenerator","kind":"class","kindModifiers":"","spans":[{"start":{"line":635,"offset":1},"end":{"line":657,"offset":2}}],"nameSpan":{"start":{"line":635,"offset":7},"end":{"line":635,"offset":32}},"childItems":[{"text":"constructor","kind":"constructor","kindModifiers":"","spans":[{"start":{"line":643,"offset":5},"end":{"line":645,"offset":6}}]},{"text":"getStartingSequence","kind":"method","kindModifiers":"","spans":[{"start":{"line":654,"offset":5},"end":{"line":656,"offset":6}}],"nameSpan":{"start":{"line":654,"offset":5},"end":{"line":654,"offset":24}}}]},{"text":"main","kind":"function","kindModifiers":"","spans":[{"start":{"line":810,"offset":1},"end":{"line":812,"offset":2}}],"nameSpan":{"start":{"line":810,"offset":10},"end":{"line":810,"offset":14}}},{"text":"NumberAdder","kind":"class","kindModifiers":"","spans":[{"start":{"line":504,"offset":1},"end":{"line":515,"offset":2}}],"nameSpan":{"start":{"line":504,"offset":7},"end":{"line":504,"offset":18}},"childItems":[{"text":"combine","kind":"method","kindModifiers":"","spans":[{"start":{"line":512,"offset":5},"end":{"line":514,"offset":6}}],"nameSpan":{"start":{"line":512,"offset":5},"end":{"line":512,"offset":12}},"childItems":[{"text":"l.reduce() callback","kind":"function","kindModifiers":"","spans":[{"start":{"line":513,"offset":25},"end":{"line":513,"offset":52}}]}]}]},{"text":"SequenceGenerator","kind":"class","kindModifiers":"abstract","spans":[{"start":{"line":306,"offset":1},"end":{"line":369,"offset":2}}],"nameSpan":{"start":{"line":306,"offset":16},"end":{"line":306,"offset":33}},"childItems":[{"text":"constructor","kind":"constructor","kindModifiers":"","spans":[{"start":{"line":339,"offset":5},"end":{"line":343,"offset":6}}]},{"text":"combiner","kind":"property","kindModifiers":"","spans":[{"start":{"line":314,"offset":5},"end":{"line":314,"offset":27}}],"nameSpan":{"start":{"line":314,"offset":5},"end":{"line":314,"offset":13}}},{"text":"generateSequence","kind":"method","kindModifiers":"","spans":[{"start":{"line":352,"offset":5},"end":{"line":359,"offset":6}}],"nameSpan":{"start":{"line":352,"offset":5},"end":{"line":352,"offset":21}},"childItems":[{"text":"i","kind":"var","kindModifiers":"","spans":[{"start":{"line":354,"offset":18},"end":{"line":354,"offset":23}}],"nameSpan":{"start":{"line":354,"offset":18},"end":{"line":354,"offset":19}}},{"text":"latest_window","kind":"const","kindModifiers":"","spans":[{"start":{"line":355,"offset":19},"end":{"line":355,"offset":84}}],"nameSpan":{"start":{"line":355,"offset":19},"end":{"line":355,"offset":32}}},{"text":"sequence","kind":"var","kindModifiers":"","spans":[{"start":{"line":353,"offset":13},"end":{"line":353,"offset":50}}],"nameSpan":{"start":{"line":353,"offset":13},"end":{"line":353,"offset":21}}}]},{"text":"generationLength","kind":"property","kindModifiers":"","spans":[{"start":{"line":330,"offset":5},"end":{"line":330,"offset":30}}],"nameSpan":{"start":{"line":330,"offset":5},"end":{"line":330,"offset":21}}},{"text":"getStartingSequence","kind":"method","kindModifiers":"abstract","spans":[{"start":{"line":368,"offset":5},"end":{"line":368,"offset":41}}],"nameSpan":{"start":{"line":368,"offset":14},"end":{"line":368,"offset":33}}},{"text":"windowSize","kind":"property","kindModifiers":"","spans":[{"start":{"line":322,"offset":5},"end":{"line":322,"offset":24}}],"nameSpan":{"start":{"line":322,"offset":5},"end":{"line":322,"offset":15}}}]}]}}
Info 33   [18:35:29.762] request:
    {
      "seq": 5,
      "type": "request",
      "command": "navtree",
      "arguments": {
        "file": "/Users/joshuaying/emblem/semantic-graph/test-ts/src/index.ts"
      }
    }
Perf 34   [18:35:29.762] 5::navtree: elapsed time (in milliseconds) 0.3215
Info 35   [18:35:29.762] response:
    {"seq":0,"type":"response","command":"navtree","request_seq":5,"success":true,"body":{"text":"<global>","kind":"script","kindModifiers":"","spans":[{"start":{"line":1,"offset":1},"end":{"line":71,"offset":32}}]}}
Info 36   [18:35:29.763] request:
    {
      "seq": 6,
      "type": "request",
      "command": "navtree",
      "arguments": {
        "file": "/Users/joshuaying/emblem/semantic-graph/test-ts/src/bfs-test.ts"
      }
    }
Perf 37   [18:35:29.763] 6::navtree: elapsed time (in milliseconds) 0.6358
Info 38   [18:35:29.763] response:
    {"seq":0,"type":"response","command":"navtree","request_seq":6,"success":true,"body":{"text":"<global>","kind":"script","kindModifiers":"","spans":[{"start":{"line":1,"offset":1},"end":{"line":152,"offset":2}}],"childItems":[{"text":"A","kind":"class","kindModifiers":"","spans":[{"start":{"line":9,"offset":1},"end":{"line":41,"offset":2}}],"nameSpan":{"start":{"line":9,"offset":7},"end":{"line":9,"offset":8}},"childItems":[{"text":"constructor","kind":"constructor","kindModifiers":"","spans":[{"start":{"line":25,"offset":5},"end":{"line":27,"offset":6}}]},{"text":"aField","kind":"property","kindModifiers":"","spans":[{"start":{"line":17,"offset":5},"end":{"line":17,"offset":19}}],"nameSpan":{"start":{"line":17,"offset":5},"end":{"line":17,"offset":11}}},{"text":"M","kind":"method","kindModifiers":"","spans":[{"start":{"line":35,"offset":5},"end":{"line":40,"offset":6}}],"nameSpan":{"start":{"line":35,"offset":5},"end":{"line":35,"offset":6}},"childItems":[{"text":"b","kind":"const","kindModifiers":"","spans":[{"start":{"line":36,"offset":15},"end":{"line":36,"offset":26}}],"nameSpan":{"start":{"line":36,"offset":15},"end":{"line":36,"offset":16}}}]}]},{"text":"B","kind":"class","kindModifiers":"","spans":[{"start":{"line":94,"offset":1},"end":{"line":152,"offset":2}}],"nameSpan":{"start":{"line":94,"offset":7},"end":{"line":94,"offset":8}},"childItems":[{"text":"constructor","kind":"constructor","kindModifiers":"","spans":[{"start":{"line":126,"offset":5},"end":{"line":129,"offset":6}}]},{"text":"bField","kind":"property","kindModifiers":"","spans":[{"start":{"line":102,"offset":5},"end":{"line":102,"offset":19}}],"nameSpan":{"start":{"line":102,"offset":5},"end":{"line":102,"offset":11}}},{"text":"bField2","kind":"property","kindModifiers":"","spans":[{"start":{"line":110,"offset":5},"end":{"line":110,"offset":20}}],"nameSpan":{"start":{"line":110,"offset":5},"end":{"line":110,"offset":12}}},{"text":"bField3","kind":"property","kindModifiers":"","spans":[{"start":{"line":118,"offset":5},"end":{"line":118,"offset":20}}],"nameSpan":{"start":{"line":118,"offset":5},"end":{"line":118,"offset":12}}},{"text":"C","kind":"method","kindModifiers":"","spans":[{"start":{"line":138,"offset":5},"end":{"line":140,"offset":6}}],"nameSpan":{"start":{"line":138,"offset":5},"end":{"line":138,"offset":6}}},{"text":"D","kind":"method","kindModifiers":"","spans":[{"start":{"line":149,"offset":5},"end":{"line":151,"offset":6}}],"nameSpan":{"start":{"line":149,"offset":5},"end":{"line":149,"offset":6}}}]}]}}
Info 39   [18:35:29.765] request:
    {
      "seq": 7,
      "type": "request",
      "command": "references",
      "arguments": {
        "file": "/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts",
        "line": 306,
        "offset": 1
      }
    }
Info 40   [18:35:29.766] Finding references to /Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts position 10736 in project /dev/null/inferredProject1*
Perf 41   [18:35:29.788] 7::references: elapsed time (in milliseconds) 23.5384
Info 42   [18:35:29.788] response:
    {"seq":0,"type":"response","command":"references","request_seq":7,"success":true,"body":{"refs":[{"file":"/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts","start":{"line":306,"offset":16},"end":{"line":306,"offset":33},"contextStart":{"line":306,"offset":1},"contextEnd":{"line":369,"offset":2},"isWriteAccess":true,"isDefinition":true},{"file":"/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts","start":{"line":635,"offset":41},"end":{"line":635,"offset":58},"isWriteAccess":false,"isDefinition":false}],"symbolName":"","symbolStartOffset":0,"symbolDisplayString":""}}
Info 43   [18:35:29.790] request:
    {
      "seq": 8,
      "type": "request",
      "command": "references",
      "arguments": {
        "file": "/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts",
        "line": 314,
        "offset": 5
      }
    }
Info 44   [18:35:29.790] Finding references to /Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts position 11223 in project /dev/null/inferredProject1*
Perf 45   [18:35:29.799] 8::references: elapsed time (in milliseconds) 9.2334
Info 46   [18:35:29.799] response:
    {"seq":0,"type":"response","command":"references","request_seq":8,"success":true,"body":{"refs":[{"file":"/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts","start":{"line":314,"offset":5},"end":{"line":314,"offset":13},"contextStart":{"line":314,"offset":5},"contextEnd":{"line":314,"offset":27},"isWriteAccess":false,"isDefinition":true},{"file":"/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts","start":{"line":342,"offset":14},"end":{"line":342,"offset":22},"isWriteAccess":true,"isDefinition":false},{"file":"/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts","start":{"line":356,"offset":32},"end":{"line":356,"offset":40},"isWriteAccess":false,"isDefinition":false}],"symbolName":"combiner","symbolStartOffset":5,"symbolDisplayString":"(property) SequenceGenerator<T>.combiner: Combiner<T>"}}
Info 47   [18:35:29.800] request:
    {
      "seq": 9,
      "type": "request",
      "command": "references",
      "arguments": {
        "file": "/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts",
        "line": 322,
        "offset": 5
      }
    }
Info 48   [18:35:29.800] Finding references to /Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts position 11709 in project /dev/null/inferredProject1*
Perf 49   [18:35:29.803] 9::references: elapsed time (in milliseconds) 2.9522
Info 50   [18:35:29.803] response:
    {"seq":0,"type":"response","command":"references","request_seq":9,"success":true,"body":{"refs":[{"file":"/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts","start":{"line":322,"offset":5},"end":{"line":322,"offset":15},"contextStart":{"line":322,"offset":5},"contextEnd":{"line":322,"offset":24},"isWriteAccess":false,"isDefinition":true},{"file":"/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts","start":{"line":340,"offset":14},"end":{"line":340,"offset":24},"isWriteAccess":true,"isDefinition":false},{"file":"/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts","start":{"line":355,"offset":73},"end":{"line":355,"offset":83},"isWriteAccess":false,"isDefinition":false}],"symbolName":"windowSize","symbolStartOffset":5,"symbolDisplayString":"(property) SequenceGenerator<T>.windowSize: number"}}
Info 51   [18:35:29.804] request:
    {
      "seq": 10,
      "type": "request",
      "command": "references",
      "arguments": {
        "file": "/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts",
        "line": 330,
        "offset": 5
      }
    }
Info 52   [18:35:29.804] Finding references to /Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts position 12234 in project /dev/null/inferredProject1*
Perf 53   [18:35:29.807] 10::references: elapsed time (in milliseconds) 2.8780
Info 54   [18:35:29.807] response:
    {"seq":0,"type":"response","command":"references","request_seq":10,"success":true,"body":{"refs":[{"file":"/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts","start":{"line":330,"offset":5},"end":{"line":330,"offset":21},"contextStart":{"line":330,"offset":5},"contextEnd":{"line":330,"offset":30},"isWriteAccess":false,"isDefinition":true},{"file":"/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts","start":{"line":341,"offset":14},"end":{"line":341,"offset":30},"isWriteAccess":true,"isDefinition":false},{"file":"/Users/joshuaying/emblem/semantic-graph/test-ts/src/sequence-generator.ts","start":{"line":354,"offset":34},"end":{"line":354,"offset":50},"isWriteAccess":false,"isDefinition":false}],"symbolName":"generationLength","symbolStartOffset":5,"symbolDisplayString":"(property) SequenceGenerator<T>.generationLength: number"}}
